var path = require('path');
var fs = require('fs');

module.exports = {

  hook_stdout: function(modder) {
    var old_write = process.stdout.write;

    process.stdout.write = (function(write) {
      return function(string, encoding, fd) {
        string = modder(string);
        write.apply(process.stdout, arguments);
      }
    })(process.stdout.write);

    return function() {
      process.stdout.write = old_write
    }
  },

  mkdirSync: function (dir) {
    var parent = path.dirname(dir);
    if (parent !== dir) {
      module.exports.mkdirSync(parent);
    }
    try {
      fs.mkdirSync(dir);
    }
    catch (e) {
      if (e.code != 'EEXIST') {
        throw e;
      }
    }
  },

  structure: function(config) {

    config = config || {};

    var workPath = config.workPath || 'work';
    var sourcePath = config.sourcePath || 'source';
    var packagePath = config.packagePath || 'package';
    var solutionPath = config.solutionPath || '*.sln';
    var outputPath = config.outputPath || 'output';
    var outputBuildPath = config.outputBuildPath || 'build';
    var outputPackagePath = config.outputPackagePath || 'package';

    return {
      workPath: workPath,
      sourcePath: sourcePath,
      packagePath: packagePath,
      solutionPath: path.join(workPath, sourcePath, solutionPath),
      workSourcePath: path.join(workPath, sourcePath),
      workPackagePath: path.join(workPath, packagePath),
      outputPath: path.join(workPath, outputPath),
      outputBuildPath: path.join(workPath, outputPath, outputBuildPath),
      outputPackagePath: path.join(workPath, outputPath, outputPackagePath)
    };
  }
};
