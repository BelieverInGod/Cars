var Nuget = require('nuget-runner');
var fs = require('fs');
var merge = require('merge-stream');
var rm_core = require('rocketmake');
var request = require('request');
var path = require('path');
var Q = require('q');
var replace = require('replace');

var nuget = Nuget({
  nugetPath: './nuget.exe',
  verbosity: 'normal'
});

module.exports = {

  download: function() {
    if(fs.existsSync('./nuget.exe')) {
      return null;
    } else {
      return request.get('https://dist.nuget.org/win-x86-commandline/latest/nuget.exe')
      .pipe(fs.createWriteStream('./nuget.exe'))
    }
  },

  restore: function(config) {
    return nuget.restore({
      packages: config.solution
    })
  },

  pack: function(config) {
    rm_core.mkdirSync(config.outputDir);

    return Q.all(config.nuspecs.map(function(nuspec){

      replace({
        regex: /\|version\|/g,
        paths: [path.join(config.packagePath, nuspec)],
        async: false,
        silent: false,
        quiet: false,
        replacement: config.version.semver
      });

      return nuget.pack({
        spec: path.join(config.packagePath, nuspec),
        basePath: config.basePath,
        outputDirectory: config.outputDir,
        version: config.version.semver,
        noPackageAnalysis: true,
        verbosity: 'quiet'
      });
    }));
  },

  push: function(config) {
    return Q.all(config.nupkgs.map(function(nupkg){
      return nuget.push(nupkg.file, {
        source: nupkg.url,
        apiKey: nupkg.apiKey
      });
    }));
  }
};
